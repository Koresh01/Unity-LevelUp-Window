//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""SpheresPicker"",
            ""id"": ""d7532f6f-fe5e-42a3-860c-116e8f675770"",
            ""actions"": [
                {
                    ""name"": ""Pick"",
                    ""type"": ""Value"",
                    ""id"": ""4d054e77-33b9-4afc-8239-86c0df3cf5b1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b01b528a-90b7-4b0b-9828-29a622312dac"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9e44d18-cea6-4144-9206-cb1c6347168d"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SpheresPicker
        m_SpheresPicker = asset.FindActionMap("SpheresPicker", throwIfNotFound: true);
        m_SpheresPicker_Pick = m_SpheresPicker.FindAction("Pick", throwIfNotFound: true);
    }

    ~@InputActions()
    {
        UnityEngine.Debug.Assert(!m_SpheresPicker.enabled, "This will cause a leak and performance issues, InputActions.SpheresPicker.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpheresPicker
    private readonly InputActionMap m_SpheresPicker;
    private List<ISpheresPickerActions> m_SpheresPickerActionsCallbackInterfaces = new List<ISpheresPickerActions>();
    private readonly InputAction m_SpheresPicker_Pick;
    public struct SpheresPickerActions
    {
        private @InputActions m_Wrapper;
        public SpheresPickerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pick => m_Wrapper.m_SpheresPicker_Pick;
        public InputActionMap Get() { return m_Wrapper.m_SpheresPicker; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpheresPickerActions set) { return set.Get(); }
        public void AddCallbacks(ISpheresPickerActions instance)
        {
            if (instance == null || m_Wrapper.m_SpheresPickerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpheresPickerActionsCallbackInterfaces.Add(instance);
            @Pick.started += instance.OnPick;
            @Pick.performed += instance.OnPick;
            @Pick.canceled += instance.OnPick;
        }

        private void UnregisterCallbacks(ISpheresPickerActions instance)
        {
            @Pick.started -= instance.OnPick;
            @Pick.performed -= instance.OnPick;
            @Pick.canceled -= instance.OnPick;
        }

        public void RemoveCallbacks(ISpheresPickerActions instance)
        {
            if (m_Wrapper.m_SpheresPickerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpheresPickerActions instance)
        {
            foreach (var item in m_Wrapper.m_SpheresPickerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpheresPickerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpheresPickerActions @SpheresPicker => new SpheresPickerActions(this);
    public interface ISpheresPickerActions
    {
        void OnPick(InputAction.CallbackContext context);
    }
}
